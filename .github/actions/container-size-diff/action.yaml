---
# yaml-language-server: $schema=https://json.schemastore.org/github-action.json
name: Container Size Diff
description: Creates a Markdown summary of the size difference between two container versions

inputs:
  from-container:
    description: Baseline container image for size comparison
    required: true
  to-container:
    description: Container image to be compared to the baseline
    required: true

outputs:
  size-diff-markdown:
    description: Markdown formatted output of container size comparison
    value: ${{ steps.size-diff.outputs.markdown }}

runs:
  using: composite
  steps:
    - name: Setup Node
      uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
      with:
        node-version: 22.x

    - name: Setup NPM dependencies
      shell: bash
      run: npm install execa@9 filesize@11 markdown-table@3

    - name: Container Size Diff
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      id: size-diff
      with:
        script: |
          const { execaSync } = require("execa");
          const { filesize } = require("filesize");
          const { markdownTable } = require("markdown-table");

          const fromContainer = '${{ inputs.from-container }}';
          const toContainer = '${{ inputs.to-container }}';

          async function getSizes(container) {
              try {
                  const { stdout } = execaSync("docker", ["manifest", "inspect", "-v", container]);
                  const manifests = [].concat(JSON.parse(stdout.trim()));

                  return Object.fromEntries(
                      manifests.map(m => {
                          const p = m.Descriptor?.platform || {};
                          const key = [p.os, p.architecture, p.variant, p["os.version"]]
                              .filter(Boolean)
                              .join("/") || "unknown";

                          const layers = m.OCIManifest?.layers || m.layers || [];
                          const total = layers.reduce((sum, l) => sum + (l.size || 0), 0);

                          return [key, total];
                      })
                  );
              } catch (e) {
                  core.error(`Failed to inspect ${container}: ${e.message}`);
                  return {};
              }
          }

          const fromSizes = await getSizes(fromContainer);
          const toSizes   = await getSizes(toContainer);

          const allPlatforms = [...new Set([...Object.keys(fromSizes), ...Object.keys(toSizes)])].sort();

          const total = (sizes) => Object.values(sizes).reduce((a, b) => a + b, 0);
          const delta = total(toSizes) - total(fromSizes);

          const rows = [
            ["OS/Platform", "Previous", "Current", "Change", "Trend"], ...allPlatforms.map(p => {
                const a = fromSizes[p] || 0;
                const b = toSizes[p]   || 0;
                const d = b - a;
                const pct = a ? `${d >= 0 ? "+" : ""}${(d / a * 100).toFixed(2)}%` : (b ? "+âˆž" : "+0.00%");
                const icon = d < 0 ? "ðŸ”½" : d > 0 ? "ðŸ”¼" : "ðŸ”„";
                return [
                    p,
                    filesize(a),
                    filesize(b),
                    `${d >= 0 ? "+" : ""}${filesize(Math.abs(d))} (${pct})`,
                    icon
                ];
            })
          ];

          let output = `## ðŸ“¦ Container Size Analysis

          Comparing \`${fromContainer}\` â†’ \`${toContainer}\`

          ðŸ“Š **Total Change:** ${filesize(delta)} (${((delta / (total(fromSizes) || 1)) * 100).toFixed(2)}%)

          ### ðŸ“ˆ Size Comparison Table

          ${markdownTable(rows, { align: ["l", "c", "c", "c", "c"] })}`;

          core.setOutput("markdown", output);
